knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
ggplot(ts.daily.carbs, aes(x = DailyCarbs)) +
geom_histogram(color = "black", fill = "royalblue", binwidth = 15) +
labs(title = "Daily Carbohydrate Intake Distribution",
subtitle = "Including Recommended Ranges of Daily Carb Intake (Based on Weight)",
x = "Daily Carb Intake",
y = "Frequency") +
annotate("rect", fill = "darkgreen",
xmin = lowmin, xmax = lowmax, ymin = 0, ymax = 18, alpha = .2) +
annotate("rect", fill = "orange",
xmin = lowmax, xmax = midmax, ymin = 0, ymax = 18, alpha = .2) +
annotate("rect", fill = "pink",
xmin = midmax, xmax = highmax, ymin = 0, ymax = 18, alpha = .2) +
geom_label(aes(x = 150, y = 13, label = "Low"), color = "darkgreen", fill = "white") +
geom_label(aes(x = 250, y = 13, label = "Moderate"), color = "orange", fill = "white") +
geom_label(aes(x = 400, y = 13, label = "High"), color = "red", fill = "white")
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
library(chron)
library(fpp3)
library(plotly)
library(car)
library(forecast)
library(ggthemes)
library(ggpubr)
library(ggplot2)
library(tibbletime)
library(distributional)
library(dynlm)
library(nortest)
library(ggcorrplot)
theme_set(theme_solarized())
# Importing data
df <- read.csv("Data/df_model.csv")
df.old <- read.csv("Data/old_BG.csv")
df.basal <- read.csv("Data/basal_data.csv")
df.carbs <- read.csv("Data/carbs_data.csv")
# Cleaning carbs data
df.carbs <- df.carbs |>
mutate(Date = as.Date(Date, "%m/%d/%y"),
TimeofDay = format(as.POSIXct(Time.of.Day,format='%I:%M:%S %p'),format="%H:%M:%S"),
Time = ymd_hms(paste(Date, TimeofDay)),
Carbs = as.numeric(Carbs..grams..est..),
Bolus = as.numeric(Bolus..units.)) |>
select(Time, Carbs, Bolus, Food)
# Calculating daily carb intake
df.daily.carbs <- df.carbs |>
mutate(Date = as_date(Time),
Time = floor_date(Date)) |>
group_by(Date) |>
summarize(DailyCarbs = sum(Carbs))
# Generating new time-series to plot
ts.daily.carbs <- df.daily.carbs |>
as_tsibble(index = Date)
# Plotting daily carbs
kgs <- 57
lowmin <- 1*kgs
lowmax <- 3*kgs
midmax <- 6*kgs
highmax <- 8*kgs
ggplot(ts.daily.carbs, aes(x = DailyCarbs)) +
geom_histogram(color = "black", fill = "royalblue", binwidth = 15) +
labs(title = "Daily Carbohydrate Intake Distribution",
subtitle = "Including Recommended Ranges of Daily Carb Intake (Based on Weight)",
x = "Daily Carb Intake",
y = "Frequency") +
annotate("rect", fill = "darkgreen",
xmin = lowmin, xmax = lowmax, ymin = 0, ymax = 18, alpha = .2) +
annotate("rect", fill = "orange",
xmin = lowmax, xmax = midmax, ymin = 0, ymax = 18, alpha = .2) +
annotate("rect", fill = "pink",
xmin = midmax, xmax = highmax, ymin = 0, ymax = 18, alpha = .2) +
geom_label(aes(x = 150, y = 13, label = "Low"), color = "darkgreen", fill = "white") +
geom_label(aes(x = 250, y = 13, label = "Moderate"), color = "orange", fill = "white") +
geom_label(aes(x = 400, y = 13, label = "High"), color = "red", fill = "white")
# Creating numeric variable for minute of the day
df.regression <- df |>
mutate(BG = as.numeric(BG),
Hour = hour(Time),
Minute = minute(Time))
df.regression$Min_of_day <- ((df.regression$Hour*60) + df.regression$Minute)
# Adding lagged BG value for regression
df.regression$BG_L1 <- lag(df.regression$BG)
# Create data frame to check correlations
df.cor <- df.regression |>
mutate(Blood_Glucose = as.numeric(BG)) |>
select(Blood_Glucose, EffectiveCarbs, EffectiveInsulin)
# Creating correlation plot
cor.mx <- cor(df.cor)
ggcorrplot(cor.mx, method = "circle", hc.order = TRUE, type = "lower") +
labs(Title = "Correlation of Numeric Variables")
# Multivariate, lagged regression model
lm.model <- dynlm(BG ~ EffectiveCarbs + EffectiveInsulin +
as.factor(Exercise) + Min_of_day +
BG_L1,
data = df.regression)
acf(lm.model)
install.packages('lmtest')
install.packages("lmtest")
install.packages("lmtest")
install.packages("lmtest")
install.packages("lmtest")
install.packages("lmtest")
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
library(lmtest)
dwtest(lm.model)
# Model Performance
summary(lm.model)
# Residual Analysis
plot(lm.model)
vif(lm.model)
install.packages('car')
install.packages("car")
library(car)
vif(lm.model)
ggplot(df, aes(x=BG,y=EffectiveCarbs)) + geom_point
ggplot(df, aes(x=BG,y=EffectiveCarbs)) + geom_point()
library(chron)
library(fpp3)
library(plotly)
library(car)
library(forecast)
library(ggthemes)
library(ggpubr)
library(ggplot2)
library(tibbletime)
library(distributional)
library(dynlm)
library(lmtest)
library(nortest)
library(ggcorrplot)
library(car)
theme_set(theme_solarized())
ggplot(df, aes(x=BG,y=EffectiveCarbs)) + geom_point()
