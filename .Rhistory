}
return(means)
}
matrix.col.mean(y)
means.y <- matrix.col.mean(y) # Save function output into an object
means.y
rm(list = ls()) # Clear environment
gc()            # Clear memory
cat("\f")       # Clear console
fizz <- function(n) {
ifelse (n%%3 == 0
, return("Fizz")
, return("")
)
}
fizz(5L)  # integer input
fizz(6L)  # integer input
fizz(5)   # non-integer input
fizz(6.3) # non-integer input
fizz <- function(n) {
if (is.integer(n)==TRUE) {
ifelse (n%%3 == 0
, return("Fizz")
, return("")
)
}
else {stop()}
}
fizz(5L)  # integer input
fizz(6L)  # integer input
fizz(5)   # non-integer input
fizz(6.3) # non-integer input
buzz <- function(n) {
if (is.integer(n)==TRUE) {
ifelse (n%%5 == 0
, return("Buzz")
, return("")
)
}
else {stop()}
}
buzz(5L)  # integer input
buzz(6L)  # integer input
buzz(5)   # non-integer input
buzz(6.3) # non-integer input
fizzbuzz <- function(n) {
if (fizz(n)=="Fizz" & buzz(n)=="Buzz"){
return("Fizzbuzz")}
else if (fizz(n)=="Fizz"){
return("Fizz")}
else if (buzz(n)=="Buzz"){
return("Buzz")}
else {
return("")
}
}
fizzbuzz(4L)  # integer input
fizzbuzz(6L)  # integer input
fizzbuzz(15L) # integer input
fizzbuzz(4)   # non-integer input
fizzbuzz(6.3) # non-integer input
fizzbuzz(15)  # non-integer input
x <- [1:5]
x<-5:10
fizzbuzz(x)
fizz(x)
buzz(x)
rep(1, 5)
means.y <- rep(NA, ncol(y))
fbr <- function(n,m) {
result <- rep(NA,m-n)
for (i in n:m){
ifelse (fizzbuzz(i)==""
, result[i] <- i
, result[i] <- fizzbuzz(i)
)
}
return(result)
}
fbr(10L,15L)  # integer inputs
fbr(10,15)    # non-integer inputs
fbr <- function(n,m) {
result <- n:m
for (i in n:m){
ifelse (fizzbuzz(i)==""
, result[i] <- i
, result[i] <- fizzbuzz(i)
)
}
return(result)
}
fbr(10L,15L)  # integer inputs
x<-10:15
fbr(10:15)
fbr(10,15)
fbr <- function(n,m) {
result <- c()
for (i in n:m){
ifelse (fizzbuzz(i)==""
, result <- c(result,i)
, result[i] <- c(result,fizzbuzz(i))
)
}
return(result)
}
fbr(10L,15L)  # integer inputs
x<-c()
x<- c(x,10)
x<- c(x,"Fizz")
fbr <- function(n,m) {
result <- c()
for (i in n:m){
ifelse (fizzbuzz(i)==""
, result <- c(result,i)
, result[i] <- c(result,fizzbuzz(i))
)
}
return(result)
}
fbr(10L,15L)  # integer inputs
fbr <- function(n,m) {
result <- c()
for (i in n:m){
ifelse (fizzbuzz(i)==""
, result <- c(result,i)
, result <- c(result,fizzbuzz(i))
)
}
return(result)
}
fbr(10L,15L)  # integer inputs
fbr(10,15)    # non-integer inputs
fbr(15L, 10L) # n is larger than m
fbr <- function(n,m) {
if (is.integer(n)==TRUE & is.interger(n)==TRUE) {
if (m>n) {
result <- c()
for (i in n:m){
ifelse (fizzbuzz(i)==""
, result <- c(result,i)
, result <- c(result,fizzbuzz(i))
)
}
return(result)
}
else (stop())
}
else (stop())
}
fbr(10L,15L)  # integer inputs
fbr <- function(n,m) {
if (is.integer(n)==TRUE & is.integer(n)==TRUE) {
if (m>n) {
result <- c()
for (i in n:m){
ifelse (fizzbuzz(i)==""
, result <- c(result,i)
, result <- c(result,fizzbuzz(i))
)
}
return(result)
}
else (stop())
}
else (stop())
}
# Use commands below to test your function:
fbr(10L,15L)  # integer inputs
fbr(10,15)    # non-integer inputs
fbr <- function(n,m) {
if (is.integer(n)==TRUE & is.integer(n)==TRUE) {
if (m>n) {
result <- c()
for (i in n:m){
ifelse (fizzbuzz(i)==""
, result <- c(result,i)
, result <- c(result,fizzbuzz(i))
)
}
return(result)
}
else (stop("M is not greater than N"))
}
else (stop("Not Integer"))
}
fbr(10,15)    # non-integer inputs
fbr(15L, 10L) # n is larger than m
fbr(10L,15L)  # integer inputs
fbr(10,15)    # non-integer inputs
fbr(15L, 10L) # n is larger than m
x <- sample.int(100,20)
set.seed(1000)
x <- sample.int(100,20)
y <- matrix(nrow=length(x),ncol=3)
y[,1] <- fizz(x)
y[,2] <- buzz(x)
y[,3] <- fizzbuzz(x)
print(y)
fizz(x)
fizz <- function(n) {
result <- c()
for (i in n) {
if (is.integer(i)==TRUE) {
ifelse (i%%3 == 0
, result <- c(result,"Fizz")
, result <- c(result, "")
)
}
else {stop("Not Integer")}
return(result)
}
}
# Use commands below to test your function:
fizz(5L)  # integer input
fizz(6L)  # integer input
fizz(5)   # non-integer input
fizz(6.3) # non-integer input
buzz <- function(n) {
result <- c()
for (i in n) {
if (is.integer(i)==TRUE) {
ifelse (i%%5 == 0
, result <- c(result,"Buzz")
, result <- c(result, "")
)
}
else {stop("Not Integer")}
return(result)
}
}
fizzbuzz <- function(n) {
if (fizz(n)=="Fizz" & buzz(n)=="Buzz"){
return("Fizzbuzz")}
else if (fizz(n)=="Fizz"){
return("Fizz")}
else if (buzz(n)=="Buzz"){
return("Buzz")}
else {
return("")
}
}
# Use commands below to test your function:
fizzbuzz(4L)  # integer input
fizzbuzz(6L)  # integer input
fizzbuzz(15L) # integer input
fizzbuzz(4)   # non-integer input
fizzbuzz(6.3) # non-integer input
fizzbuzz(15)  # non-integer input
fbr <- function(n,m) {
if (is.integer(n)==TRUE & is.integer(n)==TRUE) {
if (m>n) {
result <- c()
for (i in n:m){
ifelse (fizzbuzz(i)==""
, result <- c(result,i)
, result <- c(result,fizzbuzz(i))
)
}
return(result)
}
else (stop("M is not greater than N"))
}
else (stop("Not Integer"))
}
# Use commands below to test your function:
fbr(10L,15L)  # integer inputs
fbr(10,15)    # non-integer inputs
fbr(15L, 10L) # n is larger than m
y <- matrix(nrow=length(x),ncol=3)
y[,1] <- fizz(x)
y[,2] <- buzz(x)
y[,3] <- fizzbuzz(x)
print(y)
fizz(x)
data <- data.frame(nrow=20,
input = c())
data <- data.frame(nrow=20,
input = vector(nrow=20))
data <- data.frame(input = c()
, stringsAsFactors = FALSE
)
data <- data.frame(input = c()
, nrow = 20
, stringsAsFactors = FALSE
)
data <- data.frame(20
, input = c()
, stringsAsFactors = FALSE
)
data <- data.frame(vector(length=20)
, input = c()
, stringsAsFactors = FALSE
)
data <- data.frame(vector(length=20)
, input = vector(length=20)
, stringsAsFactors = FALSE
)
View(data)
data <- data.frame(input = vector(length=20)
, stringsAsFactors = FALSE
)
View(data)
data$input <- x
View(data)
data$fizz <- y[,1]
data$buzz <- y[,2]
data$fizzbuzz <- y[,3]
View(data)
View(y)
View(data)
data$fbr <- fbr(data$input)
fbr(10L,15L)  # integer inputs
install.packages("fredr")
install.packages("devtools")
install.packages("tidyverse")
install.packages("ggplot2")
library(fredr)
library(tidyverse)
library(ggplot2)
fredr_set_key("e4082bb39c029bec8b14d3186485ce75")
fredr_series_search_text(
search_text = "federal funds",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
popular_funds_series <- fredr_series_search_text(
search_text = "federal funds",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
View(popular_funds_series)
knitr::opts_chunk$set(echo = TRUE)
FFR <- fredr(
series_id = "FEDFUNDS",
observation_start = as.Date("2003-01-01"),
observation_end = as.Date("2023-01-01")
)
View(FFR)
ggplot(FFR, aes(x = date, y = value)) +
geom_line() +
labs(x = "Observation Date", y = "Rate")+
ggtitle("Federal Funds Rate\n(Effective)") +
theme(plot.title = element_text(hjust = 0.5))
fredr_series_search_text(
+     search_text = "bond rate",
fredr_series_search_text(
search_text = "bond rate",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
bond_rate_search <- fredr_series_search_text(
search_text = "federal funds",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
View(bond_rate_search)
bond_rate_search <- fredr_series_search_text(
+     search_text = "bond rate",
bond_rate_search <- fredr_series_search_text(
+     search_text = "bond",
bond_rate_search <- fredr_series_search_text(
search_text = "bond rate",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
View(bond_rate_search)
bond_rate_search <- fredr_series_search_text(
search_text = "10-year treasury",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
View(bond_rate_search)
bond_rate <- fredr(
series_id = "T10Y2Y",
observation_start = as.Date("2003-01-01"),
observation_end = as.Date("2023-01-01")
)
ggplot(bond_rate, aes(x = date, y = value)) +
geom_line() +
labs(x = "Observation Date", y = "Rate")+
ggtitle("10-Year Bond Rate\n(Effective)") +
theme(plot.title = element_text(hjust = 0.5))
inflation_search <- fredr_series_search_text(
search_text = "inflation rate",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
View(inflation_search)
CPI <- fredr(
series_id = "CPIAUCSL",
observation_start = as.Date("2003-01-01"),
observation_end = as.Date("2023-01-01")
)
ggplot(CPI, aes(x = date, y = value)) +
geom_line() +
labs(x = "Observation Date", y = "Rate")+
ggtitle("Consumer Price Index (CPI)\n(Effective)") +
theme(plot.title = element_text(hjust = 0.5))
urate_search <- fredr_series_search_text(
search_text = "unemployment",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
View(urate_search)
u_rate <- fredr(
series_id = "UNRATE",
observation_start = as.Date("2003-01-01"),
observation_end = as.Date("2023-01-01")
)
ggplot(u_rate, aes(x = date, y = value)) +
geom_line() +
labs(x = "Observation Date", y = "Rate")+
ggtitle("Unemployment Rate\n(Effective)") +
theme(plot.title = element_text(hjust = 0.5))
recession_search <- fredr_series_search_text(
search_text = "recession",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
View(recession_search)
recession <- fredr(
series_id = "JHDUSRGDPBR",
observation_start = as.Date("2003-01-01"),
observation_end = as.Date("2023-01-01")
)
ggplot(recession, aes(x = date, y = value)) +
geom_line() +
labs(x = "Observation Date", y = "Rate")+
ggtitle("Recession Timeline\n(Effective)") +
theme(plot.title = element_text(hjust = 0.5))
GDP_search <- fredr_series_search_text(
search_text = "gross domestic product",
order_by = "popularity",
sort_order = "desc",
limit = 5
)
View(GDP_search)
GDP <- fredr(
series_id = "GDP",
observation_start = as.Date("2003-01-01"),
observation_end = as.Date("2023-01-01")
)
ggplot(GDP, aes(x = date, y = value)) +
geom_line() +
labs(x = "Gross Domestic Product (GDP)", y = "Rate")+
ggtitle("Recession Timeline\n(Effective)") +
theme(plot.title = element_text(hjust = 0.5))
install.packages("devtools")
install.packages("fredr")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("devtools")
install.packages("fredr")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("devtools")
install.packages("fredr")
install.packages("tidyverse")
install.packages("ggplot2")
library(fredr)
library(tidyverse)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
install.packages("fredr")
install.packages("tidyverse")
install.packages("ggplot2")
library(fredr)
library(tidyverse)
library(ggplot2)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
`devtools::install_github("sboysel/fredr”)`
install.packages("devtools")
install.packages("devtools")
install.packages("fredr")
install.packages("tidyverse")
install.packages("ggplot2")
library(fredr)
library(tidyverse)
library(ggplot2)
fredr_set_key("e4082bb39c029bec8b14d3186485ce75")
install.packages("~/Documents/SCHOOL/BC/SPRING 2023/Software Tools/Week 5/fredr_2.1.0.tar.gz", repos = NULL, type = "source")
tinytex::install_tinytex()
sudo tlmgr update --self
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
library(rmdmanip) #get it from link above, e.g. using devtools::install_github
install.packages(rmdmanip)
install.packages('rmdmanip')
library(rmdmanip) #get it from link above, e.g. using devtools::install_github
library(rmdmanip) #get it from link above, e.g. using devtools::install_github
library(rmdmanip) #get it from link above, e.g. using devtools::install_github
read.rmd('README.md') %>% put('title','your title') %>% dump('T1D.Rmd')
read.rmd('README.md') |> put('title','your title') |> dump('T1D.Rmd')
